
plugins {
  id "edu.sc.seis.version-class" version "1.0.0"
}
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'project-report'
apply plugin: 'signing'

configurations {
    // we need seisFile for sac output, but not all the other functionality
    all*.exclude group: "com.martiansoftware", module: "jsap"
    all*.exclude group: "org.rxtx", module: "rxtx"
    all*.exclude group: "org.codehaus.woodstox", module: "woodstox-core-lgpl"
    all*.exclude group: "net.java.dev.msv", module: "msv-core"
    all*.exclude group: "org.apache.httpcomponents", module: "httpclient"
    all*.exclude group: "mysql", module: "mysql-connector-java"
}

dependencies {
    compile 'edu.sc.seis:seisFile:1.8.0'
}

group = 'edu.sc.seis'
version = '2.4.6-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

artifacts {
    archives jar
}

jar {
    manifest {
        attributes("Implementation-Title": "TauP",
                   "Implementation-Version": version,
                   "TauP-Compile-Date": new Date())
    }
}

def dirName = project.name+'-'+version

def binDistFiles = copySpec {
    from('build/scripts') {
        fileMode=0755
        include('*')
        into('bin')
    }
    from(configurations.runtime) {
        into "lib"
    }
    from(jar) {
        into "lib"
    }
}

def distFiles = copySpec {
    with(binDistFiles)
    from('.') {
        include('build.gradle')
        include('settings.gradle')
    }
    from('build/docs') {
        include('javadoc/**')
        into('doc')
    }
    from('.') {
        include('gpl-3.0.txt')
        include('doc/**')
        include('jacl/**')
        include('native/**')
        include('src/**')
        include('README')
        exclude('**/*.svn')
    }
    from('srl') {
        include('taup_srl_with_figs.pdf')
        into('doc')
    }
    from('.') {
        include('gradle/**')
        include('gradlew')
        include('gradlew.bat')
    }
    from('.') {
        fileMode=0755
        include('gradlew')
        into('gradle')
    }
    from('src/main/resources/edu/sc/seis/TauP') {
        include('defaultProps')
        into('doc')
    }
    from('src/main/resources/edu/sc/seis/TauP') {
        include('StdModels/*.tvel')
        include('StdModels/*.nd')
    }
    from('build/generated-src/modVersion') {
        include('java/**')
        into('src/main')
    }
}

task explodeBin(type: Sync, dependsOn: ['jar', 'createAllStartScripts', 'genModels']) {
    with binDistFiles
    into file("$buildDir/explode")
}

task tarBin(type: Tar, dependsOn: ['explodeBin']) {
    compression = Compression.GZIP
    into(dirName) {
        with binDistFiles
    }
}

task explodeDist(type: Sync, dependsOn: ['explodeBin', 'javadoc',  'wrapper']) {
    with distFiles
    into file("$buildDir/explode")
}

task tarDist(type: Tar, dependsOn: ['explodeDist']) {
    compression = Compression.GZIP
    into(dirName) {
        with distFiles
    }
}

signing {
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'TauP'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'A seismic travel time calculator.'
        url 'http://www.seis.sc.edu/TauP'

        scm {
          connection 'scm:git:https://github.com/crotwell/TauP.git'
          developerConnection 'scm:git:https://github.com/crotwell/TauP.git'
          url 'https://github.com/crotwell/TauP'
        }

        licenses {
          license {
            name 'The GNU General Public License, Version 3'
            url 'http://www.gnu.org/licenses/gpl-3.0.html'
          }
        }

        developers {
          developer {
            id 'crotwell'
            name 'Philip Crotwell'
            email 'crotwell@seis.sc.edu'
          }
        }
      }
    }
  }
}


task createAllStartScripts() {
     // just a placeholder
}
def scripts = [
    'taup_time': 'edu.sc.seis.TauP.TauP_Time',
    'taup_pierce': 'edu.sc.seis.TauP.TauP_Pierce',
    'taup_path': 'edu.sc.seis.TauP.TauP_Path',
    'taup_create': 'edu.sc.seis.TauP.TauP_Create',
    'taup_curve': 'edu.sc.seis.TauP.TauP_Curve',
    'taup_setsac': 'edu.sc.seis.TauP.TauP_SetSac',
    'taup_wavefront': 'edu.sc.seis.TauP.TauP_Wavefront',
    'taup_table': 'edu.sc.seis.TauP.TauP_Table',
    'taup': 'edu.sc.seis.TauP.TauP'
]

  scripts.each() { scriptName, className ->
          def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    createAllStartScripts.dependsOn(t)
}


def generatedSrcDir = new File(project.buildDir, 'generated-src/StdModels')
def resourceDir = new File(generatedSrcDir, '/resources')
def outDir = new File(resourceDir, 'edu/sc/seis/TauP/StdModels/')

task genModels(dependsOn: compileJava) {
  doLast {
    println "Generate models"
    outDir.mkdirs()
    def inDir = new File(getProjectDir(), 'src/main/resources/edu/sc/seis/TauP/StdModels/')
    String[] tvelModelNames = ['iasp91', 'ak135']
    String[] ndModelNames = ['prem']
    def classLoader = new GroovyClassLoader(Project.class.classLoader)
    classLoader.addURL(new File(getBuildDir(), '/classes/java/main').toURL())
    configurations.default.each { File file -> classLoader.addURL(file.toURL())}
    def taupCreate = classLoader.loadClass('edu.sc.seis.TauP.TauP_Create').newInstance()
    taupCreate.setDirectory(inDir.getPath())
    taupCreate.setVelFileType('tvel')
    def vMod
    def tMod
    tvelModelNames.each { String model ->
        taupCreate.setModelFilename(model)
        vMod = taupCreate.loadVMod()
        tMod = taupCreate.createTauModel(vMod)
        tMod.writeModel(new File(outDir, model+'.taup').path)
    }
    taupCreate.setVelFileType('nd')
    ndModelNames.each { String model ->
        taupCreate.setModelFilename(model)
        vMod = taupCreate.loadVMod()
        tMod = taupCreate.createTauModel(vMod)
        tMod.writeModel(new File(outDir, model+'.taup').path)
    }
    // qdt with bigger tol.
    taupCreate.setVelFileType('tvel')
    taupCreate.setMinDeltaP(0.5)
    taupCreate.setMaxDeltaP(50.0)
    taupCreate.setMaxDepthInterval(915.0)
    taupCreate.setMaxRangeInterval(10.0)
    taupCreate.setMaxInterpError(1.0)
    taupCreate.setAllowInnerCoreS(false)
    taupCreate.setModelFilename("iasp91")
    vMod = taupCreate.loadVMod()
    vMod.setModelName("qdt")
    tMod = taupCreate.createTauModel(vMod)
    tMod.writeModel(new File(outDir, 'qdt.taup').path)
  }
}

genModels.inputs.files 'src/main/resources/edu/sc/seis/TauP/defaultProps'
genModels.inputs.files 'src/main/resources/edu/sc/seis/TauP/StdModels/ak135.tvel'
genModels.inputs.files 'src/main/resources/edu/sc/seis/TauP/StdModels/iasp91.tvel'
genModels.inputs.files 'src/main/resources/edu/sc/seis/TauP/StdModels/prem.nd'
genModels.outputs.files new File(outDir, 'ak135.taup')
genModels.outputs.files new File(outDir, 'iasp91.taup')
genModels.outputs.files new File(outDir, 'prem.taup')
genModels.outputs.files new File(outDir, 'qdt.taup')


assemble.dependsOn(tarDist)

sourceSets {
    StdModels {
        resources { resourceDir }
    }
    main {
       resources.srcDirs += resourceDir
    }
}
processResources.dependsOn(genModels)
